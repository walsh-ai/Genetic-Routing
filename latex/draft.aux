\relax 
\providecommand\hyper@newdestlabel[2]{}
\abx@aux@refcontext{none/global//global/global}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\abx@aux@cite{0}{kumar:10}
\abx@aux@segm{0}{0}{kumar:10}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\abx@aux@cite{0}{kumar:10}
\abx@aux@segm{0}{0}{kumar:10}
\abx@aux@cite{0}{yussof:09}
\abx@aux@segm{0}{0}{yussof:09}
\@writefile{toc}{\contentsline {section}{Introduction}{1}{section*.1}\protected@file@percent }
\abx@aux@cite{0}{watts:98}
\abx@aux@segm{0}{0}{watts:98}
\abx@aux@cite{0}{watts:98}
\abx@aux@segm{0}{0}{watts:98}
\abx@aux@cite{0}{telesford:11}
\abx@aux@segm{0}{0}{telesford:11}
\abx@aux@cite{0}{dong:15}
\abx@aux@segm{0}{0}{dong:15}
\abx@aux@cite{0}{broido:19}
\abx@aux@segm{0}{0}{broido:19}
\abx@aux@cite{0}{broido:19}
\abx@aux@segm{0}{0}{broido:19}
\abx@aux@cite{0}{sohn:17}
\abx@aux@segm{0}{0}{sohn:17}
\abx@aux@cite{0}{kim:12}
\abx@aux@segm{0}{0}{kim:12}
\abx@aux@cite{0}{broido:19}
\abx@aux@segm{0}{0}{broido:19}
\abx@aux@cite{0}{smith:21}
\abx@aux@segm{0}{0}{smith:21}
\abx@aux@cite{0}{kumar:10}
\abx@aux@segm{0}{0}{kumar:10}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\abx@aux@cite{0}{yussof:09}
\abx@aux@segm{0}{0}{yussof:09}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\abx@aux@cite{0}{yang:08}
\abx@aux@segm{0}{0}{yang:08}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\abx@aux@cite{0}{even:12}
\abx@aux@segm{0}{0}{even:12}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\@writefile{toc}{\contentsline {section}{Problem Definition}{3}{section*.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{Single Source Shortest Path}{3}{subsection*.3}\protected@file@percent }
\newlabel{eq:exists_sp}{{1}{3}{Single Source Shortest Path}{equation.0.1}{}}
\@writefile{toc}{\contentsline {subsection}{Dynamic Shortest Path Routing Problem}{3}{subsection*.4}\protected@file@percent }
\newlabel{eq:sp}{{2}{3}{Dynamic Shortest Path Routing Problem}{equation.0.2}{}}
\@writefile{toc}{\contentsline {subsection}{Notations}{3}{subsection*.5}\protected@file@percent }
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\abx@aux@cite{0}{yussof:09}
\abx@aux@segm{0}{0}{yussof:09}
\abx@aux@cite{0}{kumar:10}
\abx@aux@segm{0}{0}{kumar:10}
\abx@aux@cite{0}{gonen:11}
\abx@aux@segm{0}{0}{gonen:11}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\abx@aux@cite{0}{yussof:09}
\abx@aux@segm{0}{0}{yussof:09}
\@writefile{toc}{\contentsline {section}{Network Topologies}{4}{section*.6}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{Random Graph Models}{4}{subsection*.7}\protected@file@percent }
\newlabel{eq:waxman}{{3}{4}{Random Graph Models}{equation.0.3}{}}
\abx@aux@cite{0}{watts:98}
\abx@aux@segm{0}{0}{watts:98}
\abx@aux@cite{0}{watts:98}
\abx@aux@segm{0}{0}{watts:98}
\abx@aux@cite{0}{telesford:11}
\abx@aux@segm{0}{0}{telesford:11}
\abx@aux@cite{0}{watts:98}
\abx@aux@segm{0}{0}{watts:98}
\abx@aux@cite{0}{watts:98}
\abx@aux@segm{0}{0}{watts:98}
\abx@aux@cite{0}{telesford:11}
\abx@aux@segm{0}{0}{telesford:11}
\abx@aux@cite{0}{telesford:11}
\abx@aux@segm{0}{0}{telesford:11}
\abx@aux@cite{0}{sohn:17}
\abx@aux@segm{0}{0}{sohn:17}
\abx@aux@cite{0}{dong:15}
\abx@aux@segm{0}{0}{dong:15}
\abx@aux@cite{0}{sohn:17}
\abx@aux@segm{0}{0}{sohn:17}
\abx@aux@cite{0}{helmy:03}
\abx@aux@segm{0}{0}{helmy:03}
\abx@aux@cite{0}{dong:15}
\abx@aux@segm{0}{0}{dong:15}
\@writefile{toc}{\contentsline {subsubsection}{Small-World Model}{5}{subsubsection*.8}\protected@file@percent }
\newlabel{eq:clustering}{{4}{5}{Small-World Model}{equation.0.4}{}}
\newlabel{eq:cc}{{5}{5}{Small-World Model}{equation.0.5}{}}
\newlabel{eq:lp}{{6}{5}{Small-World Model}{equation.0.6}{}}
\abx@aux@cite{0}{watts:98}
\abx@aux@segm{0}{0}{watts:98}
\abx@aux@cite{0}{broido:19}
\abx@aux@segm{0}{0}{broido:19}
\abx@aux@cite{0}{broido:19}
\abx@aux@segm{0}{0}{broido:19}
\abx@aux@cite{0}{albert:02}
\abx@aux@segm{0}{0}{albert:02}
\abx@aux@cite{0}{sohn:17}
\abx@aux@segm{0}{0}{sohn:17}
\abx@aux@cite{0}{albert:99}
\abx@aux@segm{0}{0}{albert:99}
\@writefile{toc}{\contentsline {subsubsection}{Scale-Free Model}{6}{subsubsection*.12}\protected@file@percent }
\newlabel{eq:sf_law}{{7}{6}{Scale-Free Model}{equation.0.7}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Watts-Strogatz Graphs with \(n = 60\), \(k = 4\) for different p-values, showing the liminal space between a regular lattice and random graph. \emph  {Produced in Python}\relax }}{7}{figure.caption.9}\protected@file@percent }
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{fig:order_random}{{1}{7}{Watts-Strogatz Graphs with \(n = 60\), \(k = 4\) for different p-values, showing the liminal space between a regular lattice and random graph. \emph {Produced in Python}\relax }{figure.caption.9}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Watts-Strogatz Graphs with \(n = 24\), \(k = 6\) for increasing p-values, showing the emergence of small-worlds between order and randomness. \emph  {Produced in Python}\relax }}{7}{figure.caption.10}\protected@file@percent }
\newlabel{fig:order_random_poster}{{2}{7}{Watts-Strogatz Graphs with \(n = 24\), \(k = 6\) for increasing p-values, showing the emergence of small-worlds between order and randomness. \emph {Produced in Python}\relax }{figure.caption.10}{}}
\abx@aux@cite{0}{albert:02}
\abx@aux@segm{0}{0}{albert:02}
\abx@aux@cite{0}{albert:99}
\abx@aux@segm{0}{0}{albert:99}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Characteristic Path-Length and Clustering Coefficient for generated WS graphs with a range of P-Values (Logarithmic Scale). \emph  {Produced in Python}\relax }}{8}{figure.caption.11}\protected@file@percent }
\newlabel{fig:ws_statistics}{{3}{8}{Characteristic Path-Length and Clustering Coefficient for generated WS graphs with a range of P-Values (Logarithmic Scale). \emph {Produced in Python}\relax }{figure.caption.11}{}}
\newlabel{eq:ba_prob}{{3}{8}{Scale-Free Model}{Item.3}{}}
\newlabel{eq:power_law}{{8}{8}{Scale-Free Model}{equation.0.8}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Distribution of \(1000\) random samples following a power-law produced with Eq. \ref {eq:power_law} for where \(\Delta = 999\), \(\delta = 1\) and \(\gamma = 2\) \emph  {Produced in Python}\relax }}{8}{figure.caption.13}\protected@file@percent }
\newlabel{fig:powerlaw_log}{{4}{8}{Distribution of \(1000\) random samples following a power-law produced with Eq. \ref {eq:power_law} for where \(\Delta = 999\), \(\delta = 1\) and \(\gamma = 2\) \emph {Produced in Python}\relax }{figure.caption.13}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Distribution on Log-Log scale of \(1000\) random samples following a power-law produced with Eq. \ref {eq:power_law} for where \(\Delta = 999\), \(\delta = 1\) and \(\gamma = 2\). \emph  {Produced in Python}\relax }}{8}{figure.caption.14}\protected@file@percent }
\newlabel{fig:powerlaw_loglog}{{5}{8}{Distribution on Log-Log scale of \(1000\) random samples following a power-law produced with Eq. \ref {eq:power_law} for where \(\Delta = 999\), \(\delta = 1\) and \(\gamma = 2\). \emph {Produced in Python}\relax }{figure.caption.14}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces Example Barabasi-Albert SF random network and degree histogram. \emph  {Produced in Python}\relax }}{9}{figure.caption.15}\protected@file@percent }
\newlabel{fig:sf_poster}{{6}{9}{Example Barabasi-Albert SF random network and degree histogram. \emph {Produced in Python}\relax }{figure.caption.15}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces Degree distribution and Kernel Density Estimate (smooth line) of BA network \(m=12, n=500\) following a power-law. \emph  {Produced in Python}\relax }}{9}{figure.caption.17}\protected@file@percent }
\newlabel{fig:sf_kde}{{8}{9}{Degree distribution and Kernel Density Estimate (smooth line) of BA network \(m=12, n=500\) following a power-law. \emph {Produced in Python}\relax }{figure.caption.17}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {9}{\ignorespaces Degree distribution of the BA graph \(m = 12, n = 1500\) from Figure \ref {fig:dist_loglog} a scatter plot in linear scale. \emph  {Produced in Python}\relax }}{9}{figure.caption.18}\protected@file@percent }
\newlabel{fig:dist_large}{{9}{9}{Degree distribution of the BA graph \(m = 12, n = 1500\) from Figure \ref {fig:dist_loglog} a scatter plot in linear scale. \emph {Produced in Python}\relax }{figure.caption.18}{}}
\abx@aux@cite{0}{broido:19}
\abx@aux@segm{0}{0}{broido:19}
\abx@aux@cite{0}{broido:19}
\abx@aux@segm{0}{0}{broido:19}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces Example Barabasi-Albert SF random networks of simulation sizes \(n = 100, 225, 500\). \emph  {Produced in Python}\relax }}{10}{figure.caption.16}\protected@file@percent }
\newlabel{fig:example_sizes}{{7}{10}{Example Barabasi-Albert SF random networks of simulation sizes \(n = 100, 225, 500\). \emph {Produced in Python}\relax }{figure.caption.16}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {10}{\ignorespaces Degree distribution in Log-Log scale of BA network \(m=12, n=1500\) illustrating the characteristic shape where samples follow a power-law. \emph  {Produced in Python}\relax }}{10}{figure.caption.19}\protected@file@percent }
\newlabel{fig:dist_loglog}{{10}{10}{Degree distribution in Log-Log scale of BA network \(m=12, n=1500\) illustrating the characteristic shape where samples follow a power-law. \emph {Produced in Python}\relax }{figure.caption.19}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {11}{\ignorespaces Degree distribution density plot in linear scale of a generated BA network \(m=4, n=500\). \emph  {Produced in Python}\relax }}{10}{figure.caption.20}\protected@file@percent }
\newlabel{fig:sf_degree_density}{{11}{10}{Degree distribution density plot in linear scale of a generated BA network \(m=4, n=500\). \emph {Produced in Python}\relax }{figure.caption.20}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {12}{\ignorespaces Example generated BA graph with minimum starting graph \(m = 1\). \emph  {Produced in Python}\relax }}{10}{figure.caption.21}\protected@file@percent }
\newlabel{fig:sf_example_m1}{{12}{10}{Example generated BA graph with minimum starting graph \(m = 1\). \emph {Produced in Python}\relax }{figure.caption.21}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {13}{\ignorespaces Example generated BA graph with small starting graph \(m = 4\). \emph  {Produced in Python}\relax }}{10}{figure.caption.22}\protected@file@percent }
\newlabel{fig:sf_example_small}{{13}{10}{Example generated BA graph with small starting graph \(m = 4\). \emph {Produced in Python}\relax }{figure.caption.22}{}}
\@writefile{toc}{\contentsline {subsubsection}{Log-Normal Model}{10}{subsubsection*.23}\protected@file@percent }
\abx@aux@cite{0}{broido:19}
\abx@aux@segm{0}{0}{broido:19}
\abx@aux@cite{0}{smith:21}
\abx@aux@segm{0}{0}{smith:21}
\abx@aux@cite{0}{smith:21}
\abx@aux@segm{0}{0}{smith:21}
\newlabel{eq:lognormal_pdf}{{9}{11}{Log-Normal Model}{equation.0.9}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {14}{\ignorespaces Distribution/Probability Density Function (PDF) of a log-normal random variable. \emph  {Produced in Python}\relax }}{11}{figure.caption.24}\protected@file@percent }
\newlabel{fig:lognormal_dist}{{14}{11}{Distribution/Probability Density Function (PDF) of a log-normal random variable. \emph {Produced in Python}\relax }{figure.caption.24}{}}
\abx@aux@cite{0}{smith:21}
\abx@aux@segm{0}{0}{smith:21}
\abx@aux@cite{0}{smith:21}
\abx@aux@segm{0}{0}{smith:21}
\abx@aux@cite{0}{smith:21}
\abx@aux@segm{0}{0}{smith:21}
\abx@aux@cite{0}{smith:21}
\abx@aux@segm{0}{0}{smith:21}
\abx@aux@cite{0}{smith:21}
\abx@aux@segm{0}{0}{smith:21}
\newlabel{eq:depth_factor}{{10}{12}{Log-Normal Model}{equation.0.10}{}}
\newlabel{eq:surface_factor}{{11}{12}{Log-Normal Model}{equation.0.11}{}}
\newlabel{eq:ln_prob}{{12}{12}{Log-Normal Model}{equation.0.12}{}}
\newlabel{eq:ln_weight}{{13}{12}{Log-Normal Model}{equation.0.13}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {15}{\ignorespaces Degree Distribution and Kernel Density Estimation (smooth line) a network generated with the procedure proposed by Smith \blx@tocontentsinit {0}\cite {smith:21}. \emph  {Produced in Python}\relax }}{12}{figure.caption.25}\protected@file@percent }
\newlabel{fig:ln_degree_dist}{{15}{12}{Degree Distribution and Kernel Density Estimation (smooth line) a network generated with the procedure proposed by Smith \cite {smith:21}. \emph {Produced in Python}\relax }{figure.caption.25}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {16}{\ignorespaces Networks of sizes \(n = 100, 225, 500\) generated with the procedure proposed by Smith \blx@tocontentsinit {0}\cite {smith:21}\emph  {Produced in Python}\relax }}{13}{figure.caption.26}\protected@file@percent }
\newlabel{fig:ln_example_sizes}{{16}{13}{Networks of sizes \(n = 100, 225, 500\) generated with the procedure proposed by Smith \cite {smith:21}\emph {Produced in Python}\relax }{figure.caption.26}{}}
\@writefile{lol}{\contentsline {lstlisting}{./Listings/log\textunderscore normal.py}{13}{lstlisting.-1}\protected@file@percent }
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\@writefile{toc}{\contentsline {subsection}{Stochastic Topological Dynamics}{15}{subsection*.27}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{Weight Set Dynamics}{15}{subsection*.28}\protected@file@percent }
\newlabel{eq:weight_mult}{{14}{15}{Weight Set Dynamics}{equation.0.14}{}}
\@writefile{toc}{\contentsline {subsubsection}{Simulations}{15}{subsubsection*.29}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {17}{\ignorespaces Number of shortest paths changed for WS graph with Edge Weight Dynamics and a range of standard deviations. (\(Pr_{dyn} = 1\)). \emph  {Produced in Python}\relax }}{16}{figure.caption.30}\protected@file@percent }
\newlabel{fig:ewd_ex1}{{17}{16}{Number of shortest paths changed for WS graph with Edge Weight Dynamics and a range of standard deviations. (\(Pr_{dyn} = 1\)). \emph {Produced in Python}\relax }{figure.caption.30}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {18}{\ignorespaces Number of shortest paths changed for WS graph with Edge Weight Dynamics, and a range of probability parameters. (\(\sigma = 0.2\)). \emph  {Produced in Python}\relax }}{16}{figure.caption.31}\protected@file@percent }
\newlabel{fig:ewd_ex2}{{18}{16}{Number of shortest paths changed for WS graph with Edge Weight Dynamics, and a range of probability parameters. (\(\sigma = 0.2\)). \emph {Produced in Python}\relax }{figure.caption.31}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {19}{\ignorespaces Average shortest path length for \(ts = 100\) time-steps and a range of \(\sigma \). WS Graphs. Edge weight Dynamics. \(Pr_{dyn} = 1\). \emph  {Produced in Python}\relax }}{16}{figure.caption.32}\protected@file@percent }
\newlabel{fig:ewd_ex3}{{19}{16}{Average shortest path length for \(ts = 100\) time-steps and a range of \(\sigma \). WS Graphs. Edge weight Dynamics. \(Pr_{dyn} = 1\). \emph {Produced in Python}\relax }{figure.caption.32}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {20}{\ignorespaces Average shortest path length for \(ts = 100\) time-steps and a range of \(Pr_{dyn}\). \(\sigma = 0.1\) WS Graphs. Edge weight Dynamics. \emph  {Produced in Python}\relax }}{16}{figure.caption.33}\protected@file@percent }
\newlabel{fig:ewd_ex4}{{20}{16}{Average shortest path length for \(ts = 100\) time-steps and a range of \(Pr_{dyn}\). \(\sigma = 0.1\) WS Graphs. Edge weight Dynamics. \emph {Produced in Python}\relax }{figure.caption.33}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {21}{\ignorespaces Number of shortest paths changed for \(ts = 100\) time-steps and a range of \(Pr_{dyn}\) WS Graphs. Edge weight Dynamics. \emph  {Produced in Python}\relax }}{17}{figure.caption.34}\protected@file@percent }
\newlabel{fig:ewd_ex5}{{21}{17}{Number of shortest paths changed for \(ts = 100\) time-steps and a range of \(Pr_{dyn}\) WS Graphs. Edge weight Dynamics. \emph {Produced in Python}\relax }{figure.caption.34}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {22}{\ignorespaces Average shortest path length for \(ts = 100\) time-steps and a range of \(Pr_{dyn}\). WS Graphs. Edge weight Dynamics. \emph  {Produced in Python}\relax }}{17}{figure.caption.35}\protected@file@percent }
\newlabel{fig:ewd_ex6}{{22}{17}{Average shortest path length for \(ts = 100\) time-steps and a range of \(Pr_{dyn}\). WS Graphs. Edge weight Dynamics. \emph {Produced in Python}\relax }{figure.caption.35}{}}
\@writefile{toc}{\contentsline {subsection}{Edge Set Dynamics}{17}{subsection*.36}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Simulations}{17}{subsubsection*.37}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {23}{\ignorespaces The number of shortest paths changed for \(ts = 100\) time-steps in a WS graph (\(n = 250, k = 10, p = 0.1\)) for a range of probabilities \(Pr_{dyn} = 0.1, 0.25, 0.5, 0.75\). Edge set dynamics. \emph  {Produced in Python}\relax }}{17}{figure.caption.38}\protected@file@percent }
\newlabel{fig:esd_paths}{{23}{17}{The number of shortest paths changed for \(ts = 100\) time-steps in a WS graph (\(n = 250, k = 10, p = 0.1\)) for a range of probabilities \(Pr_{dyn} = 0.1, 0.25, 0.5, 0.75\). Edge set dynamics. \emph {Produced in Python}\relax }{figure.caption.38}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {24}{\ignorespaces Average shortest path length for \(ts = 100\) time-steps, for a range of probabilities \(Pr_{dyn} = 0.1, 0.25, 0.5, 0.75\). Edge set dynamics. \emph  {Produced in Python}\relax }}{17}{figure.caption.39}\protected@file@percent }
\newlabel{fig:esd_lengths}{{24}{17}{Average shortest path length for \(ts = 100\) time-steps, for a range of probabilities \(Pr_{dyn} = 0.1, 0.25, 0.5, 0.75\). Edge set dynamics. \emph {Produced in Python}\relax }{figure.caption.39}{}}
\@writefile{toc}{\contentsline {subsection}{Node Set Dynamics}{18}{subsection*.40}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Simulations}{18}{subsubsection*.41}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {25}{\ignorespaces Number of shortest paths changed for \(ts = 100\) time-steps of a WS graph. Range of probability values \(Pr_{dyn} = 0.01, 0.05, 0.1\). Node set dynamics. \emph  {Produced in Python}\relax }}{18}{figure.caption.42}\protected@file@percent }
\newlabel{fig:nsd_paths}{{25}{18}{Number of shortest paths changed for \(ts = 100\) time-steps of a WS graph. Range of probability values \(Pr_{dyn} = 0.01, 0.05, 0.1\). Node set dynamics. \emph {Produced in Python}\relax }{figure.caption.42}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {26}{\ignorespaces Average shortest path length for \(ts = 100\) time-steps, for a range of probabilities \(Pr_{dyn} = 0.01, 0.05, 0.1\). Node set dynamics. \emph  {Produced in Python}\relax }}{18}{figure.caption.43}\protected@file@percent }
\newlabel{fig:nsd_lengths}{{26}{18}{Average shortest path length for \(ts = 100\) time-steps, for a range of probabilities \(Pr_{dyn} = 0.01, 0.05, 0.1\). Node set dynamics. \emph {Produced in Python}\relax }{figure.caption.43}{}}
\abx@aux@cite{0}{mitchell:97}
\abx@aux@segm{0}{0}{mitchell:97}
\abx@aux@cite{0}{mitchell:97}
\abx@aux@segm{0}{0}{mitchell:97}
\@writefile{lof}{\contentsline {figure}{\numberline {27}{\ignorespaces Distribution of shortest paths changed for a range of \(Pr_{dyn}\) values and Kernel Density Estimate (KDE). Node set dynamics. \emph  {Produced in Python}\relax }}{19}{figure.caption.44}\protected@file@percent }
\newlabel{fig:nsd_dist_prob}{{27}{19}{Distribution of shortest paths changed for a range of \(Pr_{dyn}\) values and Kernel Density Estimate (KDE). Node set dynamics. \emph {Produced in Python}\relax }{figure.caption.44}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {28}{\ignorespaces Distribution of shortest paths changed for a value of \(Pr_{dyn} = 0.1\) and Kernel Density Estimate (KDE). Node set dynamics. \emph  {Produced in Python}\relax }}{19}{figure.caption.45}\protected@file@percent }
\newlabel{fig:nsd_dist}{{28}{19}{Distribution of shortest paths changed for a value of \(Pr_{dyn} = 0.1\) and Kernel Density Estimate (KDE). Node set dynamics. \emph {Produced in Python}\relax }{figure.caption.45}{}}
\@writefile{toc}{\contentsline {section}{Proto-typical Genetic Algorithm for a Simplified Problem Defintion: Travelling Salesman}{19}{section*.46}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Encoding}{19}{subsubsection*.47}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Hypotheses Generation}{19}{subsubsection*.48}\protected@file@percent }
\abx@aux@cite{0}{mitchell:97}
\abx@aux@segm{0}{0}{mitchell:97}
\@writefile{toc}{\contentsline {subsubsection}{Fitness \& Selection}{20}{subsubsection*.49}\protected@file@percent }
\newlabel{eq:fitness1}{{15}{20}{Fitness \& Selection}{equation.0.15}{}}
\@writefile{toc}{\contentsline {subsubsection}{Crossover}{20}{subsubsection*.50}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Mutation}{20}{subsubsection*.51}\protected@file@percent }
\abx@aux@cite{0}{mitchell:97}
\abx@aux@segm{0}{0}{mitchell:97}
\@writefile{loa}{\contentsline {algorithm}{\numberline {1}{\ignorespaces Algorithm 1: Prototypical Genetic Algorithm for the Travelling Salesman Problem\relax }}{21}{algorithm.1}\protected@file@percent }
\newlabel{Generation Loop}{{23}{21}{Algorithm 1: Prototypical Genetic Algorithm for the Travelling Salesman Problem\relax }{algorithm.1}{}}
\newlabel{alg:tsp}{{1}{21}{Algorithm 1: Prototypical Genetic Algorithm for the Travelling Salesman Problem\relax }{algorithm.1}{}}
\@writefile{toc}{\contentsline {subsubsection}{Simulations}{21}{subsubsection*.52}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {29}{\ignorespaces Ring lattice with edge weights zero representing the optimal path in the later tested fully-connected topology. \emph  {Produced in Python}\relax }}{21}{figure.caption.53}\protected@file@percent }
\newlabel{fig:ring_optimal}{{29}{21}{Ring lattice with edge weights zero representing the optimal path in the later tested fully-connected topology. \emph {Produced in Python}\relax }{figure.caption.53}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {30}{\ignorespaces The path of one solution generated by the GA TSP where the optimal path follows a ring about the nodes, whilst two connections have been wasted. \emph  {Produced in Python}\relax }}{21}{figure.caption.54}\protected@file@percent }
\newlabel{fig:ring_solution}{{30}{21}{The path of one solution generated by the GA TSP where the optimal path follows a ring about the nodes, whilst two connections have been wasted. \emph {Produced in Python}\relax }{figure.caption.54}{}}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\abx@aux@cite{0}{yussof:09}
\abx@aux@segm{0}{0}{yussof:09}
\abx@aux@cite{0}{kumar:10}
\abx@aux@segm{0}{0}{kumar:10}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\abx@aux@cite{0}{mitchell:97}
\abx@aux@segm{0}{0}{mitchell:97}
\@writefile{lof}{\contentsline {figure}{\numberline {31}{\ignorespaces Learning history of the GA for TSP to produce the solution depicted in Figure \ref {fig:ring_solution}. The mean and maximum [best of] generation fitness are plotted. GA converges to a near-optimal solution after \nobreakspace  {}100 generations. \emph  {Produced in Python}\relax }}{22}{figure.caption.55}\protected@file@percent }
\newlabel{fig:tsp_history}{{31}{22}{Learning history of the GA for TSP to produce the solution depicted in Figure \ref {fig:ring_solution}. The mean and maximum [best of] generation fitness are plotted. GA converges to a near-optimal solution after ~100 generations. \emph {Produced in Python}\relax }{figure.caption.55}{}}
\@writefile{toc}{\contentsline {section}{Specialised GA for SSSP Routing}{22}{section*.56}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Population Generation}{22}{subsubsection*.57}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Mutation}{22}{subsubsection*.58}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Crossover}{22}{subsubsection*.59}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {32}{\ignorespaces Printed output of Specialised GA for an example problem on an ER graph \(n = 100, p = 0.4\) for source and desitnation vertices \(s = 0, d = 63\). (Excl. learning history data). \emph  {Produced in Python}\relax }}{22}{figure.caption.60}\protected@file@percent }
\newlabel{fig:sssp_result_small_1}{{32}{22}{Printed output of Specialised GA for an example problem on an ER graph \(n = 100, p = 0.4\) for source and desitnation vertices \(s = 0, d = 63\). (Excl. learning history data). \emph {Produced in Python}\relax }{figure.caption.60}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {33}{\ignorespaces Printed output of Specialised GA on an ER graph \(n = 1000, p = 0.4\) for source and desitnation vertices \(s = 0, d = 563\). (Excl. learning history data).\emph  {Produced in Python}\relax }}{23}{figure.caption.61}\protected@file@percent }
\newlabel{fig:sssp_result_large}{{33}{23}{Printed output of Specialised GA on an ER graph \(n = 1000, p = 0.4\) for source and desitnation vertices \(s = 0, d = 563\). (Excl. learning history data).\emph {Produced in Python}\relax }{figure.caption.61}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {34}{\ignorespaces Example solution path computed with Specialised GA for an ER graph \(n = 100, p = 0.4\). The optimal path found \(SP_{i}(s, d)\) is shown in red. \emph  {Produced in Python}\relax }}{23}{figure.caption.62}\protected@file@percent }
\newlabel{fig:sssp_solution}{{34}{23}{Example solution path computed with Specialised GA for an ER graph \(n = 100, p = 0.4\). The optimal path found \(SP_{i}(s, d)\) is shown in red. \emph {Produced in Python}\relax }{figure.caption.62}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {35}{\ignorespaces Learning history of the Specialised GA for small ER graph \(n = 100, p = 0.4\) and large ER graph \(n = 1000, p = 0.4\). Mean and maximum of generation fitness is plotted. \emph  {Produced in Python}\relax }}{23}{figure.caption.63}\protected@file@percent }
\newlabel{fig:sssp_history_1}{{35}{23}{Learning history of the Specialised GA for small ER graph \(n = 100, p = 0.4\) and large ER graph \(n = 1000, p = 0.4\). Mean and maximum of generation fitness is plotted. \emph {Produced in Python}\relax }{figure.caption.63}{}}
\@writefile{toc}{\contentsline {subsubsection}{Performance Issues}{23}{subsubsection*.64}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {36}{\ignorespaces Printed output of Specialised GA \#2 with alternative mutation method on an ER graph \(n = 100, p = 0.4\) for source and desitnation vertices \(s = 0, d = 63\). (Excl. learning history data).\emph  {Produced in Python}\relax }}{23}{figure.caption.65}\protected@file@percent }
\newlabel{fig:sssp_result_small_2}{{36}{23}{Printed output of Specialised GA \#2 with alternative mutation method on an ER graph \(n = 100, p = 0.4\) for source and desitnation vertices \(s = 0, d = 63\). (Excl. learning history data).\emph {Produced in Python}\relax }{figure.caption.65}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {37}{\ignorespaces Printed output of Specialised GA \#2 with alternative mutation method on an ER graph \(n = 1000, p = 0.4\) for source and desitnation vertices \(s = 0, d = 563\). (Excl. learning history data).\emph  {Produced in Python}\relax }}{23}{figure.caption.66}\protected@file@percent }
\newlabel{fig:sssp_result_large_2}{{37}{23}{Printed output of Specialised GA \#2 with alternative mutation method on an ER graph \(n = 1000, p = 0.4\) for source and desitnation vertices \(s = 0, d = 563\). (Excl. learning history data).\emph {Produced in Python}\relax }{figure.caption.66}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {38}{\ignorespaces Learning history of the Specialised GA \#2 with alternative mutation method for small ER graph \(n = 100, p = 0.4\) and large ER graph \(n = 1000, p = 0.4\). Mean and maximum of generation fitness is plotted\emph  {Produced in Python}\relax }}{23}{figure.caption.67}\protected@file@percent }
\newlabel{fig:sssp_history_2}{{38}{23}{Learning history of the Specialised GA \#2 with alternative mutation method for small ER graph \(n = 100, p = 0.4\) and large ER graph \(n = 1000, p = 0.4\). Mean and maximum of generation fitness is plotted\emph {Produced in Python}\relax }{figure.caption.67}{}}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\@writefile{lof}{\contentsline {figure}{\numberline {41}{\ignorespaces Runtime of the Specialised GA by population generation (blue) and convergence (yellow) for ER graphs of increasing size. This plot clearly shows that initial population generation is the most time consuming stage of the GA which also scales poorly with the size of the network. \emph  {Produced in Python}\relax }}{24}{figure.caption.70}\protected@file@percent }
\newlabel{fig:sssp_runtime}{{41}{24}{Runtime of the Specialised GA by population generation (blue) and convergence (yellow) for ER graphs of increasing size. This plot clearly shows that initial population generation is the most time consuming stage of the GA which also scales poorly with the size of the network. \emph {Produced in Python}\relax }{figure.caption.70}{}}
\@writefile{toc}{\contentsline {section}{Specialised GA with Immigrant Schemes for DSPRP}{24}{section*.71}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {39}{\ignorespaces Mean runtime and solution (converged) fitness for a range of mutation rates with the original (A) and alternative (B) mutation methods. A: Produce a new random subpath from a vertex \(v\) to destination; B: Uniformly replace a single vertex in path . \emph  {Produced in Python}\relax }}{25}{figure.caption.68}\protected@file@percent }
\newlabel{fig:mutation_table}{{39}{25}{Mean runtime and solution (converged) fitness for a range of mutation rates with the original (A) and alternative (B) mutation methods. A: Produce a new random subpath from a vertex \(v\) to destination; B: Uniformly replace a single vertex in path . \emph {Produced in Python}\relax }{figure.caption.68}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {40}{\ignorespaces Mean Best of Generation Fitness (BGF) for two mutationa methods: The original (A) and alternative (B). A: Produce a new random subpath from a vertex \(v\) to destination; B: Uniformly replace a single vertex in path . The original Mutation A performs as expected whilst Mutation B fails to converge. \emph  {Produced in Python}\relax }}{25}{figure.caption.69}\protected@file@percent }
\newlabel{fig:mutation_comparison}{{40}{25}{Mean Best of Generation Fitness (BGF) for two mutationa methods: The original (A) and alternative (B). A: Produce a new random subpath from a vertex \(v\) to destination; B: Uniformly replace a single vertex in path . The original Mutation A performs as expected whilst Mutation B fails to converge. \emph {Produced in Python}\relax }{figure.caption.69}{}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {2}{\ignorespaces Algorithm 2: Specialised Genetic Algorithm with Immigrant Schemes\relax }}{26}{algorithm.2}\protected@file@percent }
\newlabel{alg:higa}{{2}{26}{Algorithm 2: Specialised Genetic Algorithm with Immigrant Schemes\relax }{algorithm.2}{}}
\newlabel{alg:higa}{{\caption@xref {alg:higa}{ on input line 875}}{26}{Specialised GA with Immigrant Schemes for DSPRP}{algorithm.2}{}}
\@writefile{toc}{\contentsline {section}{Basic Simulation Results \& Analysis}{26}{section*.72}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{Defining Optimal Parameters}{26}{subsection*.73}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Simulation 1}{26}{subsubsection*.74}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {42}{\ignorespaces BGF with population sizes \(50, 75, 100\) with random LN graphs of sizes \(100, 225, 500\) nodes. Mean of 10 runs. This simulation shows that population size \(100\) gives better performance on average. \emph  {Produced in Python}\relax }}{27}{figure.caption.75}\protected@file@percent }
\newlabel{fig:pop_1}{{42}{27}{BGF with population sizes \(50, 75, 100\) with random LN graphs of sizes \(100, 225, 500\) nodes. Mean of 10 runs. This simulation shows that population size \(100\) gives better performance on average. \emph {Produced in Python}\relax }{figure.caption.75}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {43}{\ignorespaces BGF with population sizes \(100, 110, 120\) with LN graphs of size \(n = 500\). Mean of 10 runs. This simulation shows that population size \(100\) gives better performance on average. \emph  {Produced in Python}\relax }}{27}{figure.caption.76}\protected@file@percent }
\newlabel{fig:ln_500}{{43}{27}{BGF with population sizes \(100, 110, 120\) with LN graphs of size \(n = 500\). Mean of 10 runs. This simulation shows that population size \(100\) gives better performance on average. \emph {Produced in Python}\relax }{figure.caption.76}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {44}{\ignorespaces BGF with population sizes \(75, 100, 120\) with random WS, BA, LN graphs of size \(n = 500\). Mean of 10 runs. Population size \(100\) gives better performance on average except in WS graphs. \emph  {Produced in Python}\relax }}{28}{figure.caption.77}\protected@file@percent }
\newlabel{fig:all_pop}{{44}{28}{BGF with population sizes \(75, 100, 120\) with random WS, BA, LN graphs of size \(n = 500\). Mean of 10 runs. Population size \(100\) gives better performance on average except in WS graphs. \emph {Produced in Python}\relax }{figure.caption.77}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {45}{\ignorespaces Mean BGF of ten trials with population sizes \(100, 120\) over random LN graph \(n = 500, degree = 3000\). Population size \(100\) gives better performance. \emph  {Produced in Python}\relax }}{28}{figure.caption.78}\protected@file@percent }
\newlabel{fig:higa_pop}{{45}{28}{Mean BGF of ten trials with population sizes \(100, 120\) over random LN graph \(n = 500, degree = 3000\). Population size \(100\) gives better performance. \emph {Produced in Python}\relax }{figure.caption.78}{}}
\@writefile{toc}{\contentsline {subsubsection}{Simulation 2}{28}{subsubsection*.79}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {48}{\ignorespaces Solution fitness of Specialised GA for a range of mutation rates in LN 500 graphs. Mean of ten trails. \emph  {Produced in Python}\relax }}{28}{figure.caption.82}\protected@file@percent }
\newlabel{fig:mutation_v_fitness}{{48}{28}{Solution fitness of Specialised GA for a range of mutation rates in LN 500 graphs. Mean of ten trails. \emph {Produced in Python}\relax }{figure.caption.82}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {46}{\ignorespaces BGF for a range of mutation rates in LN graphs. Mean of three trials. Results are variable. \emph  {Produced in Python}\relax }}{29}{figure.caption.80}\protected@file@percent }
\newlabel{fig:mutation_opt}{{46}{29}{BGF for a range of mutation rates in LN graphs. Mean of three trials. Results are variable. \emph {Produced in Python}\relax }{figure.caption.80}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {47}{\ignorespaces BGF for a range of mutation rates in LN graphs of sizes \(100, 225, 500\). Mean of ten trails. \emph  {Produced in Python}\relax }}{29}{figure.caption.81}\protected@file@percent }
\newlabel{fig:mutation_opt_2}{{47}{29}{BGF for a range of mutation rates in LN graphs of sizes \(100, 225, 500\). Mean of ten trails. \emph {Produced in Python}\relax }{figure.caption.81}{}}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\@writefile{toc}{\contentsline {subsection}{GA Static Performance}{30}{subsection*.83}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Simulation 1}{30}{subsubsection*.84}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Simulation 2}{30}{subsubsection*.86}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Simulation 3}{30}{subsubsection*.88}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Simulation 4}{30}{subsubsection*.90}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{Dynamics: Change Probability Parameter}{30}{subsection*.92}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {49}{\ignorespaces BGF of each GA for static topologies. \emph  {Produced in Python}\relax }}{31}{figure.caption.85}\protected@file@percent }
\newlabel{fig:static_1}{{49}{31}{BGF of each GA for static topologies. \emph {Produced in Python}\relax }{figure.caption.85}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {50}{\ignorespaces BGF of each GA for static topologies with target optimal fitness of true shortest path (Horizontal black line) computed with Dijkstra's. \emph  {Produced in Python}\relax }}{32}{figure.caption.87}\protected@file@percent }
\newlabel{fig:static_2}{{50}{32}{BGF of each GA for static topologies with target optimal fitness of true shortest path (Horizontal black line) computed with Dijkstra's. \emph {Produced in Python}\relax }{figure.caption.87}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {51}{\ignorespaces BGF of each GA for static topologies with target optimal fitness of true shortest path (Horizontal black line) computed with Dijkstra's. Population size 100; RI = 0.1, EI = 0.1 \emph  {Produced in Python}\relax }}{33}{figure.caption.89}\protected@file@percent }
\newlabel{fig:static_3}{{51}{33}{BGF of each GA for static topologies with target optimal fitness of true shortest path (Horizontal black line) computed with Dijkstra's. Population size 100; RI = 0.1, EI = 0.1 \emph {Produced in Python}\relax }{figure.caption.89}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {52}{\ignorespaces Mean BGF for each GA for the static topologies of ten trials. Population size 100; RI = 0.1, EI = 0.1. Results indicate that HIGA performs best overall whilst elitist methods are optimal for BA / Scale-Free networks. \emph  {Produced in Python}\relax }}{34}{figure.caption.91}\protected@file@percent }
\newlabel{fig:static_4}{{52}{34}{Mean BGF for each GA for the static topologies of ten trials. Population size 100; RI = 0.1, EI = 0.1. Results indicate that HIGA performs best overall whilst elitist methods are optimal for BA / Scale-Free networks. \emph {Produced in Python}\relax }{figure.caption.91}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {53}{\ignorespaces Dynamic simulations for HIGA over each topology with varied probability parameters \(Pr_{dyn} = 0.01, 0.025, 0.05\).\emph  {Produced in Python}\relax }}{35}{figure.caption.93}\protected@file@percent }
\newlabel{fig:prob_dyn}{{53}{35}{Dynamic simulations for HIGA over each topology with varied probability parameters \(Pr_{dyn} = 0.01, 0.025, 0.05\).\emph {Produced in Python}\relax }{figure.caption.93}{}}
\@writefile{toc}{\contentsline {subsection}{Dynamic Simulations}{36}{subsection*.94}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Simulation 1}{36}{subsubsection*.95}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Simulation 2}{36}{subsubsection*.98}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Simulation 3}{36}{subsubsection*.101}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Simulation 4}{36}{subsubsection*.104}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Interpretation of Results}{36}{subsubsection*.108}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {54}{\ignorespaces Dynamic simulations for the weight-set over each topology. \(Pr_{dyn} = 0.05\).\emph  {Produced in Python}\relax }}{37}{figure.caption.96}\protected@file@percent }
\newlabel{fig:dynamic_1}{{54}{37}{Dynamic simulations for the weight-set over each topology. \(Pr_{dyn} = 0.05\).\emph {Produced in Python}\relax }{figure.caption.96}{}}
\@writefile{toc}{\contentsline {subsection}{Best of Generation Accuracy}{37}{subsection*.109}\protected@file@percent }
\newlabel{eq:bga}{{16}{37}{Best of Generation Accuracy}{equation.0.16}{}}
\@writefile{toc}{\contentsline {subsubsection}{Weight Set mBGA}{37}{subsubsection*.110}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Edge Set mBGA}{37}{subsubsection*.111}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {55}{\ignorespaces \#2 Dynamic simulations for the weight-set over each topology. \(Pr_{dyn} = 0.05\).\emph  {Produced in Python}\relax }}{38}{figure.caption.97}\protected@file@percent }
\newlabel{fig:dynamic_2}{{55}{38}{\#2 Dynamic simulations for the weight-set over each topology. \(Pr_{dyn} = 0.05\).\emph {Produced in Python}\relax }{figure.caption.97}{}}
\@writefile{toc}{\contentsline {subsubsection}{Node Set mBGA}{38}{subsubsection*.112}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {56}{\ignorespaces Dynamic simulations for the edge-set over each topology. \(Pr_{dyn} = 0.05\).\emph  {Produced in Python}\relax }}{39}{figure.caption.99}\protected@file@percent }
\newlabel{fig:dynamic_3}{{56}{39}{Dynamic simulations for the edge-set over each topology. \(Pr_{dyn} = 0.05\).\emph {Produced in Python}\relax }{figure.caption.99}{}}
\@writefile{toc}{\contentsline {subsubsection}{Edge Set Mean Generations at Target Fitness (/60 Generations)}{39}{subsubsection*.113}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Weight Set Mean Generations at Target Fitness (/60 Generations)}{39}{subsubsection*.114}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Node Set Mean Generations at Target Fitness (/60 Generations)}{39}{subsubsection*.115}\protected@file@percent }
\abx@aux@cite{0}{sohn:17}
\abx@aux@segm{0}{0}{sohn:17}
\abx@aux@cite{0}{dong:15}
\abx@aux@segm{0}{0}{dong:15}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\abx@aux@cite{0}{kumar:10}
\abx@aux@segm{0}{0}{kumar:10}
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\@writefile{lof}{\contentsline {figure}{\numberline {57}{\ignorespaces \#2 Dynamic simulations for the edge-set over each topology. \(Pr_{dyn} = 0.05\).\emph  {Produced in Python}\relax }}{40}{figure.caption.100}\protected@file@percent }
\newlabel{fig:dynamic_4}{{57}{40}{\#2 Dynamic simulations for the edge-set over each topology. \(Pr_{dyn} = 0.05\).\emph {Produced in Python}\relax }{figure.caption.100}{}}
\@writefile{toc}{\contentsline {section}{Conclusion and Future Work}{40}{section*.116}\protected@file@percent }
\abx@aux@cite{0}{yang:10}
\abx@aux@segm{0}{0}{yang:10}
\abx@aux@cite{0}{kumar:10}
\abx@aux@segm{0}{0}{kumar:10}
\abx@aux@cite{0}{yussof:09}
\abx@aux@segm{0}{0}{yussof:09}
\abx@aux@cite{0}{yussof:09}
\abx@aux@segm{0}{0}{yussof:09}
\@writefile{lof}{\contentsline {figure}{\numberline {58}{\ignorespaces Dynamic simulations for the node-set over each topology. \(Pr_{dyn} = 0.05\).\emph  {Produced in Python}\relax }}{41}{figure.caption.102}\protected@file@percent }
\newlabel{fig:dynamic_5}{{58}{41}{Dynamic simulations for the node-set over each topology. \(Pr_{dyn} = 0.05\).\emph {Produced in Python}\relax }{figure.caption.102}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {59}{\ignorespaces \#2 Dynamic simulations for the node-set over each topology. \(Pr_{dyn} = 0.05\).\emph  {Produced in Python}\relax }}{42}{figure.caption.103}\protected@file@percent }
\newlabel{fig:dynamic_6}{{59}{42}{\#2 Dynamic simulations for the node-set over each topology. \(Pr_{dyn} = 0.05\).\emph {Produced in Python}\relax }{figure.caption.103}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {60}{\ignorespaces Synchronised dynamic simulations for the weight-set over each topology. \(Pr_{dyn} = 0.05\).\emph  {Produced in Python}\relax }}{43}{figure.caption.105}\protected@file@percent }
\newlabel{fig:dynamic_7}{{60}{43}{Synchronised dynamic simulations for the weight-set over each topology. \(Pr_{dyn} = 0.05\).\emph {Produced in Python}\relax }{figure.caption.105}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {61}{\ignorespaces Synchronised dynamic simulations for the edge-set over each topology. \(Pr_{dyn} = 0.05\).\emph  {Produced in Python}\relax }}{44}{figure.caption.106}\protected@file@percent }
\newlabel{fig:dynamic_8}{{61}{44}{Synchronised dynamic simulations for the edge-set over each topology. \(Pr_{dyn} = 0.05\).\emph {Produced in Python}\relax }{figure.caption.106}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {62}{\ignorespaces Synchronised dynamic simulations for the node-set over each topology. \(Pr_{dyn} = 0.05\).\emph  {Produced in Python}\relax }}{45}{figure.caption.107}\protected@file@percent }
\newlabel{fig:dynamic_9}{{62}{45}{Synchronised dynamic simulations for the node-set over each topology. \(Pr_{dyn} = 0.05\).\emph {Produced in Python}\relax }{figure.caption.107}{}}
\abx@aux@read@bbl@mdfivesum{A783F5A7F5606A2CAED43B07DF516C5D}
\abx@aux@defaultrefcontext{0}{yang:10}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{kumar:10}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{yussof:09}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{watts:98}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{telesford:11}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{dong:15}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{broido:19}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{sohn:17}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{kim:12}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{smith:21}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{yang:08}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{even:12}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{gonen:11}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{helmy:03}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{albert:02}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{albert:99}{none/global//global/global}
\abx@aux@defaultrefcontext{0}{mitchell:97}{none/global//global/global}
\gdef \@abspage@last{46}
